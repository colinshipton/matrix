<?php
// $Id$

define('MATRIX_NUMBER', 35);

/**
 * Implementation of hook_field_info().
 */
function matrix_field_info() {
  return array(
    'matrix' => array('label' => 'Matrix Field'),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function matrix_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['size'] = array(
        '#type' => 'textfield',
        '#size' => 20,
        '#title' => t('Size of textfields'),
        '#default_value' => isset($field['size']) ? $field['size'] : 15,
      );
      
      $form['rows'] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#title' => t('Rows'),
      );
      for ($i=1; $i<= MATRIX_NUMBER; $i++) {
        $form['rows']["label_row_$i"] = array(
          '#type' => 'textfield',
          '#title' => t('Label for row %i',array('%i' => $i)),
          '#default_value' => isset($field["label_row_$i"]) ? $field["label_row_$i"] : '',
        );
      }
      
      $form['cols'] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#title' => t('Cols'),
      );                                                
      for ($i=1; $i<= MATRIX_NUMBER; $i++) {
        $form['cols']["label_column_$i"] = array(
          '#type' => 'textfield',
          '#title' => t('Label for column %i',array('%i' => $i)),
          '#default_value' => isset($field["label_column_$i"]) ? $field["label_column_$i"] : '',
        );
      }
      return $form;

    case 'save':
    for ($i=1; $i<= MATRIX_NUMBER; $i++) {
      $values[] = 'label_row_'.$i;
      $values[] = 'label_column_'.$i;
    }
    $values[] = 'size';
    return $values;
  }
}

/**
 * Implementation of hook_field().
 */
function matrix_field($op, &$node, $field, &$node_field, $teaser, $page) {
  switch ($op) {
    case 'load':
      $result = db_query("SELECT value, row, col FROM {node_field_matrix_data} WHERE vid = %d AND field_name = '%s'", $node->vid, $field['field_name']);
      $values = array();
      while ($data = db_fetch_array($result)) {
        $values[$data["row"]][$data["col"]] = $data['value'];
      }
      $additions = array($field['field_name'] => $values);
      return $additions;
    case 'update':
       db_query("DELETE FROM {node_field_matrix_data} WHERE vid = %d and field_name= '%s'",$node->vid, $field['field_name']);
    case 'insert':
      for ($i=1; $i<= MATRIX_NUMBER; $i++) {
        if (!empty($field["label_row_$i"])) {
          for ($j=1; $j<= MATRIX_NUMBER; $j++) {
            if (!empty($node_field['matrix'][$i][$j])) {
              db_query("INSERT INTO {node_field_matrix_data} 
                SET nid = %d, vid = %d, field_name = '%s', row = %d, col = %d, value = '%s'",
                $node->nid, $node->vid, $field['field_name'], $i, $j, $node_field['matrix'][$i][$j]);
            }
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function matrix_field_formatter_info() {
  return array(
    'default' => array(
      'label' => 'Table View',
      'field types' => array('matrix'),
    ),
  );
}

/**
 * Implemenation of hook_field_formatter
 */
function matrix_field_formatter($field, $item, $formatter, $node) {
  global $matrix_field_count;
  $matrix_field_count[$field['field_name']]++;
  if ($matrix_field_count[$field['field_name']] == 1) {
    return theme('matrix_table_view', $node->$field['field_name'], $field);
  }
}

/**
 * Implementation of hook_widget_info().
 */
function matrix_widget_info() {
  return array(
    'matrix' => array(
      'label' => 'Textfields',
      'field types' => array('matrix'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function matrix_widget($op, &$node, $field, &$node_field) {
  switch ($op) {
    case 'form':
      $form = array();
      $form[$field['field_name']] = array(
        '#tree' => TRUE,
        '#weight' => $field['widget']['weight'],
        '#theme' => 'matrix_table_form', 
        '#value' => '<label for="'. form_clean_id($field['field_name']) .'">'. t($field['widget']['label']) .'</label>',
        '#prefix' => '<div class="form-item matrix_field">',
        '#suffix' => '</div>',
      );
      
      
      $header = array();
      $header[0] = '';
      $first_col = array();
      
      for ($i=1; $i<= MATRIX_NUMBER; $i++) {
        if (!empty($field["label_row_$i"])) {
          $first_col[$i] = $field["label_row_$i"];
          for ($j=1; $j<= MATRIX_NUMBER; $j++) {
            if (!empty($field["label_column_$j"])) {
              $header[$j] = $field["label_column_$j"];
              $form[$field['field_name']]['matrix'][$i][$j] = array(
                '#type' => 'textfield',
                '#size' => $field['size'],
                '#default_value' => isset($node_field[$i][$j]) ? $node_field[$i][$j] : $field['widget']['default_value'][$i][$j],
              );
            }
          }
        }
      }
      
      $form[$field['field_name']]['header'] = array('#value' => $header);
      $form[$field['field_name']]['first_col'] = array('#value' => $first_col);
      return $form;
  }
}

function theme_matrix_table_form($form) {
  $rows = array();
  $header = $form['header']['#value'];
  
  foreach ($form['matrix'] as $row_key => $fields) {
    if (!empty($form['first_col']['#value'][$row_key])) {
      $row = array();
      $row[] = $form['first_col']['#value'][$row_key];
      foreach ($fields as $col_key => $field) {
        if ($field['#type'] == 'textfield') {
          $row[] = drupal_render($form['matrix'][$row_key][$col_key]);
        }
      }
      $rows[] = $row;
    }
  }
  
  drupal_render($form['header']);
  drupal_render($form['first_col']);
  $output = drupal_render($form);
  $output .= theme('table', $header, $rows, array('class' => 'matrix'));
  return $output;
}


function theme_matrix_table_view($node_field, $field) {
  $header[] = '';
  for ($i=1; $i<= MATRIX_NUMBER; $i++) {
    if (!empty($field['label_column_'.$i])) {
      $header[] = $field['label_column_'.$i];
    }
    $rows = NULL;
    if (!empty($field['label_row_'.$i])) {
      
      $rows[] = $field['label_row_'.$i];
      for ($j=1; $j<= MATRIX_NUMBER; $j++) {
        if (!empty($node_field[$i][$j])) {
          $rows[] = $node_field[$i][$j];
        }
        elseif (!empty($field['label_column_'.$j])) {
          $rows[] = '-';
        }
      }
    }
    if ($rows) $row[] = $rows;
  }
  return theme('table', $header, $row, array());
}
